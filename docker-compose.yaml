services:
  # PostgreSQL for Prefect metadata
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect
      POSTGRES_DB: prefect
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - etl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefect"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    networks:
      - etl-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    

  prefect-server:
    image: prefecthq/prefect:3-latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_SERVER_UI_API_URL: http://localhost:4200/api  
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server start --no-services
    ports:
      - "4200:4200"
    networks:
      - etl-network

  prefect-services:
    image: prefecthq/prefect:3-latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server services start
    networks:
      - etl-network

  prefect-worker:
    build: .
    depends_on:
      prefect-server:
        condition: service_started
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    volumes:
    - ./flows:/opt/prefect/flows  
    command: prefect worker start --pool local-pool
    networks:
      - etl-network
  
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"   # MinIO API port
      - "9001:9001"   # MinIO Console port
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - ./minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - etl-network

  nifi:
    image: apache/nifi:1.19.1
    container_name: nifi
    ports:
      - "8080:8080"
      - "10000:10000"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=admin123
    volumes:
      - conf:/opt/nifi/nifi-current/conf
      - content:/opt/nifi/nifi-current/content_repository
      - db:/opt/nifi/nifi-current/database_repository
      - flowfile:/opt/nifi/nifi-current/flowfile_repository
      - provenance:/opt/nifi/nifi-current/provenance_repository
      - logs:/opt/nifi/nifi-current/logs
      - data:/opt/nifi/nifi-current/data
    networks:
      - etl-network
  
  # PostgreSQL for analytics (star schema)
  analytics-DB:
    image: postgres:latest
    container_name: example-database
    environment:
      POSTGRES_DB: sales_DB
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - etl-network

networks:
  etl-network:
    driver: bridge


volumes:
  pg-data:
  postgres_data:
  redis_data:
  conf:
  content:
  db:
  flowfile:
  provenance:
  logs:
  data:





